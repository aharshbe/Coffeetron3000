(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['jquery.jSlots.js'] = template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "/*\n * jQuery jSlots Plugin\n * http://matthewlein.com/jslot/\n * Copyright (c) 2011 Matthew Lein\n * Version: 1.0.2 (7/26/2012)\n * Dual licensed under the MIT and GPL licenses\n * Requires: jQuery v1.4.1 or later\n */\n\n(function($){\n\n    $.jSlots = function(el, options){\n\n        var base = this;\n\n        base.$el = $(el);\n        base.el = el;\n\n        base.$el.data(\"jSlots\", base);\n\n        base.init = function() {\n\n            base.options = $.extend({},$.jSlots.defaultOptions, options);\n\n            base.setup();\n            base.bindEvents();\n\n        };\n\n\n        // --------------------------------------------------------------------- //\n        // DEFAULT OPTIONS\n        // --------------------------------------------------------------------- //\n\n        $.jSlots.defaultOptions = {\n            number : 3,          // Number: number of slots\n            winnerNumber : 1,    // Number or Array: list item number(s) upon which to trigger a win, 1-based index, NOT ZERO-BASED\n            spinner : '',        // CSS Selector: element to bind the start event to\n            spinEvent : 'click', // String: event to start slots on this event\n            onStart : $.noop,    // Function: runs on spin start,\n            onEnd : $.noop,      // Function: run on spin end. It is passed (finalNumbers:Array). finalNumbers gives the index of the li each slot stopped on in order.\n            onWin : $.noop,      // Function: run on winning number. It is passed (winCount:Number, winners:Array)\n            easing : 'swing',    // String: easing type for final spin\n            time : 7000,         // Number: total time of spin animation\n            loops : 6            // Number: times it will spin during the animation\n        };\n\n        // --------------------------------------------------------------------- //\n        // HELPERS\n        // --------------------------------------------------------------------- //\n\n        base.randomRange = function(low, high) {\n            return Math.floor( Math.random() * (1 + high - low) ) + low;\n        };\n\n        // --------------------------------------------------------------------- //\n        // VARS\n        // --------------------------------------------------------------------- //\n\n        base.isSpinning = false;\n        base.spinSpeed = 0;\n        base.winCount = 0;\n        base.doneCount = 0;\n\n        base.$liHeight = 0;\n        base.$liWidth = 0;\n\n        base.winners = [];\n        base.allSlots = [];\n\n        // --------------------------------------------------------------------- //\n        // FUNCTIONS\n        // --------------------------------------------------------------------- //\n\n\n        base.setup = function() {\n\n            // set sizes\n\n            var $list = base.$el;\n            var $li = $list.find('li').first();\n\n            base.$liHeight = $li.outerHeight();\n            base.$liWidth = $li.outerWidth();\n\n            base.liCount = base.$el.children().length;\n\n            base.listHeight = base.$liHeight * base.liCount;\n\n            base.increment = (base.options.time / base.options.loops) / base.options.loops;\n\n            $list.css('position', 'relative');\n          \n\n            $li.clone().appendTo($list);\n\n            base.$wrapper = $list.wrap('<div class=\"jSlots-wrapper\"></div>').parent();\n\n            // remove original, so it can be recreated as a Slot\n            base.$el.remove();\n\n            // clone lists\n            for (var i = base.options.number - 1; i >= 0; i--){\n                base.allSlots.push( new base.Slot() );\n            }\n\n        };\n\n        base.bindEvents = function() {\n            $(base.options.spinner).bind(base.options.spinEvent, function(event) {\n                if (!base.isSpinning) {\n                    base.playSlots();\n                }\n            });\n        };\n\n        // Slot contstructor\n        base.Slot = function() {\n\n            this.spinSpeed = 0;\n            this.el = base.$el.clone().appendTo(base.$wrapper)[0];\n            this.$el = $(this.el);\n            this.loopCount = 0;\n            this.number = 0;\n\n        };\n\n\n        base.Slot.prototype = {\n\n            // do one rotation\n            spinEm : function() {\n\n                var that = this;\n\n                that.$el\n                    .css( 'top', -base.listHeight )\n                    .animate( { 'top' : '0px' }, that.spinSpeed, 'linear', function() {\n                        that.lowerSpeed();\n                    });\n\n            },\n\n            lowerSpeed : function() {\n\n                this.spinSpeed += base.increment;\n                this.loopCount++;\n\n                if ( this.loopCount < base.options.loops ) {\n\n                    this.spinEm();\n\n                } else {\n\n                    this.finish();\n\n                }\n            },\n\n            // final rotation\n            finish : function() {\n\n                var that = this;\n\n                var endNum = base.randomRange( 1, base.liCount );\n\n                var finalPos = - ( (base.$liHeight * endNum) - base.$liHeight );\n                var finalSpeed = ( (this.spinSpeed * 0.5) * (base.liCount) ) / endNum;\n\n                that.$el\n                    .css( 'top', -base.listHeight )\n                    .animate( {'top': finalPos}, finalSpeed, base.options.easing, function() {\n                        base.checkWinner(endNum, that);\n                    });\n\n            }\n\n        };\n\n        base.checkWinner = function(endNum, slot) {\n\n            base.doneCount++;\n            // set the slot number to whatever it ended on\n            slot.number = endNum;\n\n            // if its in the winners array\n            if (\n                ( $.isArray( base.options.winnerNumber ) && base.options.winnerNumber.indexOf(endNum) > -1 ) ||\n                endNum === base.options.winnerNumber\n                ) {\n\n                // its a winner!\n                base.winCount++;\n                base.winners.push(slot.$el);\n\n            }\n\n            if (base.doneCount === base.options.number) {\n\n                var finalNumbers = [];\n\n                $.each(base.allSlots, function(index, val) {\n                    finalNumbers[index] = val.number;\n                });\n\n                if ( $.isFunction( base.options.onEnd ) ) {\n                    base.options.onEnd(finalNumbers);\n                }\n\n                if ( base.winCount && $.isFunction(base.options.onWin) ) {\n                    base.options.onWin(base.winCount, base.winners, finalNumbers);\n                }\n                base.isSpinning = false;\n            }\n        };\n\n\n        base.playSlots = function() {\n\n            base.isSpinning = true;\n            base.winCount = 0;\n            base.doneCount = 0;\n            base.winners = [];\n\n            if ( $.isFunction(base.options.onStart) ) {\n                base.options.onStart();\n            }\n\n            $.each(base.allSlots, function(index, val) {\n                this.spinSpeed = 0;\n                this.loopCount = 0;\n                this.spinEm();\n            });\n\n        };\n\n\n        base.onWin = function() {\n            if ( $.isFunction(base.options.onWin) ) {\n                base.options.onWin();\n            }\n        };\n\n\n        // Run initializer\n        base.init();\n    };\n\n\n    // --------------------------------------------------------------------- //\n    // JQUERY FN\n    // --------------------------------------------------------------------- //\n\n    $.fn.jSlots = function(options){\n        if (this.length) {\n            return this.each(function(){\n                (new $.jSlots(this, options));\n            });\n        }\n    };\n\n})(jQuery);\n";
},"useData":true});
})();